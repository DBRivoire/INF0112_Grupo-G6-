package Application;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import model.*;
import service.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class MainApp extends Application {

    private Estoque estoque = new Estoque();
    private List<Venda> vendas = new ArrayList<>();
    private Cafeteria cafeteria = new Cafeteria(100);
    private RelatorioVendas relatorio;

    @Override
    public void start(Stage primaryStage) {
        // Título da janela
        primaryStage.setTitle("Sistema de Vendas");

        // Layout principal
        VBox root = new VBox(10);

        // Adicionar Produto
        TextField nomeProdutoField = new TextField();
        nomeProdutoField.setPromptText("Nome do produto");
        TextField precoCustoField = new TextField();
        precoCustoField.setPromptText("Preço de Custo");
        TextField precoVendaField = new TextField();
        precoVendaField.setPromptText("Preço de Venda");
        TextField quantidadeField = new TextField();
        quantidadeField.setPromptText("Quantidade em Estoque");

        Button adicionarProdutoButton = new Button("Adicionar Produto");

        adicionarProdutoButton.setOnAction(e -> {
            try {
                String nome = nomeProdutoField.getText();
                double precoCusto = Double.parseDouble(precoCustoField.getText());
                double precoVenda = Double.parseDouble(precoVendaField.getText());
                int quantidade = Integer.parseInt(quantidadeField.getText());

                Produto produto = new Produto(nome, precoCusto, precoVenda, quantidade);
                estoque.adicionarProduto(produto);
                showAlert(Alert.AlertType.INFORMATION, "Produto Adicionado", "Produto adicionado com sucesso!");
            } catch (Exception ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", ex.getMessage());
            }
        });

        // Botão de Exibir Produtos
        Button exibirProdutosButton = new Button("Exibir Produtos");
        exibirProdutosButton.setOnAction(e -> estoque.listarProdutos());

        // Realizar Venda
        TextField nomeProdutoVendaField = new TextField();
        nomeProdutoVendaField.setPromptText("Nome do Produto");

        TextField quantidadeVendaField = new TextField();
        quantidadeVendaField.setPromptText("Quantidade de Venda");

        Button realizarVendaButton = new Button("Realizar Venda");
        realizarVendaButton.setOnAction(e -> {
            try {
                String nomeProduto = nomeProdutoVendaField.getText();
                int quantidadeVenda = Integer.parseInt(quantidadeVendaField.getText());

                Produto produto = estoque.consultarProduto(nomeProduto);

                if (produto != null && produto.getQuantidadeEstoque() >= quantidadeVenda) {
                    ItemVenda item = new ItemVenda(produto, quantidadeVenda);
                    Venda venda = new Venda(vendas.size() + 1, new Date());
                    venda.adicionarItem(item);
                    vendas.add(venda);

                    produto.atualizarEstoque(-quantidadeVenda);

                    showAlert(Alert.AlertType.INFORMATION, "Venda Realizada", "Venda realizada com sucesso!");
                } else if (produto == null) {
                    showAlert(Alert.AlertType.ERROR, "Erro", "Produto não encontrado!");
                } else {
                    showAlert(Alert.AlertType.ERROR, "Erro", "Quantidade insuficiente em estoque!");
                }
            } catch (NumberFormatException ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", "Por favor, insira valores válidos para a quantidade!");
            } catch (Exception ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", ex.getMessage());
            }
        });

        // Criar Combo Promocional
        TextField produtosComboField = new TextField();
        produtosComboField.setPromptText("Nomes dos produtos (separados por vírgula)");
        TextField descontoComboField = new TextField();
        descontoComboField.setPromptText("Desconto (%)");

        Button criarComboButton = new Button("Criar Combo Promocional");
        criarComboButton.setOnAction(e -> {
            try {
                String[] nomesProdutos = produtosComboField.getText().split(",");
                double desconto = Double.parseDouble(descontoComboField.getText());

                List<Produto> produtosCombo = new ArrayList<>();
                for (String nome : nomesProdutos) {
                    Produto produto = estoque.consultarProduto(nome.trim());
                    if (produto != null) {
                        produtosCombo.add(produto);
                    } else {
                        throw new Exception("Produto " + nome.trim() + " não encontrado.");
                    }
                }

                ComboPromocional combo = new ComboPromocional(produtosCombo, desconto);
                showAlert(Alert.AlertType.INFORMATION, "Combo Criado", combo.toString());
            } catch (NumberFormatException ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", "Por favor, insira valores válidos para o desconto.");
            } catch (Exception ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", ex.getMessage());
            }
        });

        // Aplicar Desconto em Caneca
        TextField nomeCanecaField = new TextField();
        nomeCanecaField.setPromptText("Nome do Produto (Caneca)");

        TextField descontoCanecaField = new TextField();
        descontoCanecaField.setPromptText("Desconto (%)");

        Button aplicarDescontoCanecaButton = new Button("Aplicar Desconto na Caneca");
        aplicarDescontoCanecaButton.setOnAction(e -> {
            try {
                String nomeCaneca = nomeCanecaField.getText();
                double desconto = Double.parseDouble(descontoCanecaField.getText());

                Produto caneca = estoque.consultarProduto(nomeCaneca);
                if (caneca != null) {
                    DescontoCaneca descontoCaneca = new DescontoCaneca(desconto);
                    double novoPreco = descontoCaneca.calcularDesconto(caneca.getPrecoVenda());
                    showAlert(Alert.AlertType.INFORMATION, "Desconto Aplicado",
                            "Novo preço da caneca " + nomeCaneca + ": R$ " + String.format("%.2f", novoPreco));
                } else {
                    throw new Exception("Caneca " + nomeCaneca + " não encontrada no estoque.");
                }
            } catch (NumberFormatException ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", "Por favor, insira valores válidos para o desconto.");
            } catch (Exception ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", ex.getMessage());
            }
        });

        // Layout de Relatório
        TextField dataInicioField = new TextField();
        dataInicioField.setPromptText("Data Início (yyyy-MM-dd)");
        TextField dataFimField = new TextField();
        dataFimField.setPromptText("Data Fim (yyyy-MM-dd)");

        Button gerarRelatorioButton = new Button("Gerar Relatório");
        TextArea relatorioArea = new TextArea();
        relatorioArea.setEditable(false);

        gerarRelatorioButton.setOnAction(e -> {
            try {
                Date dataInicio = java.sql.Date.valueOf(dataInicioField.getText());
                Date dataFim = java.sql.Date.valueOf(dataFimField.getText());

                // Gera o relatório
                relatorio = new RelatorioVendas(vendas, dataInicio, dataFim);
                relatorioArea.setText(relatorio.gerarRelatorio());
            } catch (Exception ex) {
                showAlert(Alert.AlertType.ERROR, "Erro", ex.getMessage());
            }
        });

        // Caixa de verificação de café
        Text cafeStatusText = new Text("Café no estoque: " + (cafeteria.getQuantidadeCafeDisponivel() > 0 ? "Disponível" : "Indisponível"));

        // Botão para verificar a disponibilidade de café
        Button verificarCafeButton = new Button("Verificar Disponibilidade de Café");
        verificarCafeButton.setOnAction(e -> {
            // Atualiza a mensagem de acordo com a quantidade disponível de café
            if (cafeteria.getQuantidadeCafeDisponivel() > 0) {
                cafeStatusText.setText("Café no estoque: Disponível (" + cafeteria.getQuantidadeCafeDisponivel() + " unidades)");
            } else {
                cafeStatusText.setText("Café no estoque: Indisponível");
            }
        });


        // Layout principal
        root.getChildren().addAll(
                new Text("Cadastro de Produtos"), nomeProdutoField, precoCustoField, precoVendaField, quantidadeField, adicionarProdutoButton,
                exibirProdutosButton,
                new Text("Realizar Venda"), nomeProdutoVendaField, quantidadeVendaField, realizarVendaButton, cafeStatusText, verificarCafeButton,
                new Text("Criar Combo Promocional"), produtosComboField, descontoComboField, criarComboButton,
                new Text("Desconto para Canecas"), nomeCanecaField, descontoCanecaField, aplicarDescontoCanecaButton,
                new Text("Relatório de Vendas"), dataInicioField, dataFimField, gerarRelatorioButton, relatorioArea
                // Adicionando a caixa de café
        );

        // Coloca o VBox dentro de um ScrollPane para adicionar rolagem
        ScrollPane scrollPane = new ScrollPane();
        scrollPane.setContent(root);
        scrollPane.setFitToWidth(true); // Garante que o conteúdo ocupe toda a largura da tela

        // Cena e exibição
        Scene scene = new Scene(scrollPane, 400, 800);  // Definir o ScrollPane como conteúdo da cena
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Método para exibir alertas
    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
