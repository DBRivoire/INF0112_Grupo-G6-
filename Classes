// Classe cafeteria

package service;

public class Cafeteria {
    private int quantidadeCafeDisponivel; // Quantidade de café em estoque (em unidades)

    // Construtor
    public Cafeteria(int quantidadeInicial) {
        this.quantidadeCafeDisponivel = quantidadeInicial;
    }

    // Verifica se há café suficiente disponível
    public boolean verificarDisponibilidadeCafe(int quantidade) {
        return quantidade <= quantidadeCafeDisponivel;
    }

    // Diminui a quantidade de café no estoque
    public void diminuirCafe(int quantidade) {
        if (verificarDisponibilidadeCafe(quantidade)) {
            quantidadeCafeDisponivel -= quantidade;
        } else {
            System.out.println("Quantidade insuficiente de café em estoque!");
        }
    }

    // Getters e setters
    public int getQuantidadeCafeDisponivel() {
        return quantidadeCafeDisponivel;
    }

    public void setQuantidadeCafeDisponivel(int quantidadeCafeDisponivel) {
        this.quantidadeCafeDisponivel = quantidadeCafeDisponivel;
    }

    @Override
    public String toString() {
        return "Cafeteria{" +
                "quantidadeCafeDisponivel=" + quantidadeCafeDisponivel +
                '}';
    }
}




// Classe DescontoCaneca


    package service;

    public class DescontoCaneca {
        private double desconto; // Desconto aplicado (em %)

        // Construtor
        public DescontoCaneca(double desconto) {
            this.desconto = desconto;
        }

        // Método para calcular o preço com desconto
        public double calcularDesconto(double precoOriginal) {
            return precoOriginal - (precoOriginal * (desconto / 100));
        }

        public double getDesconto() {
            return desconto;
        }

        public void setDesconto(double desconto) {
            this.desconto = desconto;
        }
    }



// Classe estoque

package service;

import model.Produto;
import java.util.HashMap;
import java.util.Map;

public class Estoque {
    private Map<String, Produto> produtos;

    public Estoque() {
        this.produtos = new HashMap<>();
    }

    // Adicionar um produto ao estoque
    public void adicionarProduto(Produto produto) {
        if (produtos.containsKey(produto.getNome())) {
            throw new IllegalArgumentException("Produto já existe no estoque!");
        }
        produtos.put(produto.getNome(), produto);
    }

    // Remover um produto do estoque
    public void removerProduto(String nomeProduto) {
        if (!produtos.containsKey(nomeProduto)) {
            throw new IllegalArgumentException("Produto não encontrado no estoque!");
        }
        produtos.remove(nomeProduto);
    }

    // Consultar um produto pelo nome
    public Produto consultarProduto(String nomeProduto) {
        return produtos.get(nomeProduto);
    }

    // Atualizar estoque de um produto pelo nome
    public void atualizarEstoqueProduto(String nomeProduto, int quantidade) {
        Produto produto = produtos.get(nomeProduto);
        if (produto == null) {
            throw new IllegalArgumentException("Produto não encontrado no estoque!");
        }
        produto.atualizarEstoque(quantidade);
    }

    // Listar todos os produtos no estoque
    public void listarProdutos() {
        if (produtos.isEmpty()) {
            System.out.println("Estoque vazio!");
            return;
        }
        System.out.println("Produtos no estoque:");
        for (Produto produto : produtos.values()) {
            System.out.println(produto);
        }
    }
}



//Classe RelatorioVendas

package service;

import model.Venda;
import model.Produto;
import model.ItemVenda;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelatorioVendas {
    private final List<Venda> vendas; // Lista de vendas incluídas no relatório
    private final Date dataInicio; // Data de início do período do relatório
    private final Date dataFim; // Data de fim do período do relatório
    private Produto produtoMaisVendido; // Produto mais vendido no período
    private List<Date> diasMaisMovimento; // Dias com maior número de vendas
    private double totalVendas; // Total de vendas no período

    // Construtor
    public RelatorioVendas(List<Venda> vendas, Date dataInicio, Date dataFim) {
        this.vendas = vendas;
        this.dataInicio = dataInicio;
        this.dataFim = dataFim;
        this.produtoMaisVendido = null;
        this.diasMaisMovimento = new ArrayList<>();
        this.totalVendas = 0.0;
    }

    // Gera o relatório, calculando os atributos principais
    public void gerarRelatorio() {
        calcularTotalVendas();
        produtoMaisVendido = calcularProdutoMaisVendido();
        diasMaisMovimento = calcularDiasMaisMovimento();
    }

    // Calcula o total de vendas no período
    private void calcularTotalVendas() {
        totalVendas = 0.0;
        for (Venda venda : vendas) {
            if (venda.getDataVenda().after(dataInicio) && venda.getDataVenda().before(dataFim)) {
                totalVendas += venda.getTotalVenda();
            }
        }
    }

    // Calcula o produto mais vendido no período
    public Produto calcularProdutoMaisVendido() {
        // Obtém o mapa de produtos com suas quantidades vendidas no período
        Map<Produto, Integer> produtoQuantidades = getProdutoIntegerMap();

        Produto maisVendido = null;
        int maiorQuantidade = 0;

        // Percorre o mapa para encontrar o produto com a maior quantidade vendida
        for (Map.Entry<Produto, Integer> entry : produtoQuantidades.entrySet()) {
            if (entry.getValue() > maiorQuantidade) {
                maiorQuantidade = entry.getValue();
                maisVendido = entry.getKey();
            }
        }

        return maisVendido;// Retorna o produto mais vendido
    }

    // Metodo auxiliar que cria um mapa de produtos com suas respectivas quantidades vendidas no período
    private Map<Produto, Integer> getProdutoIntegerMap() {
        Map<Produto, Integer> produtoQuantidades = new HashMap<>();

        for (Venda venda : vendas) {
            if (venda.getDataVenda().after(dataInicio) && venda.getDataVenda().before(dataFim)) {
                for (ItemVenda item : venda.getItens()) {
                    Produto produto = item.getProduto();
                    // Adiciona a quantidade ao mapa, somando com o valor atual (se existir)
                    produtoQuantidades.put(produto,
                            produtoQuantidades.getOrDefault(produto, 0) + item.getQuantidade());
                }
            }
        }
        return produtoQuantidades;
    }

    // Calcula os dias com maior número de vendas no período
    public List<Date> calcularDiasMaisMovimento() {
        Map<Date, Integer> vendasPorDia = new HashMap<>();

        for (Venda venda : vendas) {
            if (venda.getDataVenda().after(dataInicio) && venda.getDataVenda().before(dataFim)) {
                Date dia = venda.getDataVenda();
                vendasPorDia.put(dia, vendasPorDia.getOrDefault(dia, 0) + 1);
            }
        }

        List<Date> diasMaisMovimento = new ArrayList<>();
        int maiorNumeroVendas = 0;

        for (Map.Entry<Date, Integer> entry : vendasPorDia.entrySet()) {
            if (entry.getValue() > maiorNumeroVendas) {
                maiorNumeroVendas = entry.getValue();
                diasMaisMovimento.clear();
                diasMaisMovimento.add(entry.getKey());
            } else if (entry.getValue() == maiorNumeroVendas) {
                diasMaisMovimento.add(entry.getKey());
            }
        }

        return diasMaisMovimento;
    }

    // Getters para acessar os resultados do relatório
    public List<Venda> getVendas() {
        return vendas;
    }

    public Date getDataInicio() {
        return dataInicio;
    }

    public Date getDataFim() {
        return dataFim;
    }

    public Produto getProdutoMaisVendido() {
        return produtoMaisVendido;
    }

    public List<Date> getDiasMaisMovimento() {
        return diasMaisMovimento;
    }

    public double getTotalVendas() {
        return totalVendas;
    }

    // Método para exibir o relatório completo
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Relatório de Vendas\n");
        sb.append("Período: ").append(dataInicio).append(" a ").append(dataFim).append("\n");
        sb.append("Total de Vendas: R$ ").append(totalVendas).append("\n");
        sb.append("Produto Mais Vendido: ").append(produtoMaisVendido != null
                ? produtoMaisVendido.getNome() : "Nenhum produto").append("\n");
        sb.append("Dias de Maior Movimento: ").append(diasMaisMovimento).append("\n");
        return sb.toString();
    }
}


